
Expression.Substitution.print_subt (Expression.match_expression ["x"; "y"] (Expression.parse_expression "foo x y") (Expression.parse_expression "no (bar z) (bar z)"))

Expression.Substitution.print_subt (Expression.match_expression ["x"; "y"] (Expression.parse_expression "foo x y") (Expression.parse_expression "foo a b"))

Expression.Substitution.print_subt (Expression.match_expression ["x"; "y"] (Expression.parse_expression "foo x x") (Expression.parse_expression "foo (bar z) (bar z)"))

Expression.Substitution.print_subt (Expression.match_expression ["x"; "y"] (Expression.parse_expression "foo x (foo y)") (Expression.parse_expression "foo (bar z) y"))

Expression.attemptRewrite ["x"; "y"] (Expression.Equality (Expression.parse_expression "foo x y", Expression.parse_expression "x y")) (Expression.parse_expression "foo (bar z) (bar w)")

Expression.Substitution.print_subt (Expression.match_expression ["y"] (Expression.parse_expression "foo x y") (Expression.parse_expression "foo a b"))

Expression.attemptRewrite ["y"] (Expression.Equality (Expression.parse_expression "foo x y", Expression.parse_expression "y")) (Expression.parse_expression "foo a b")
	
let myEqualities =
[ ("eq1", ["x"], Expression.Equality(Expression.parse_expression "foo x x", Expression.parse_expression "bar x"))
; ("eq2", ["x";"y"], Expression.Equality(Expression.parse_expression "bar x y", Expression.parse_expression "y"))
; ("eq3", ["x"], Expression.Equality(Expression.parse_expression "bozo x (foo x)", Expression.parse_expression "foo (bar x x)"))] ;; 

Expression.attemptRewrite ["x"; "y"] (Expression.Equality (Expression.parse_expression "bar x y", Expression.parse_expression "y")) (Expression.parse_expression "foo (bar a b) c")
Expression.Substitution.print_subt (Expression.match_expression ["x"; "y"] (Expression.parse_expression "bar x y") (Expression.parse_expression "foo (bar a b) c"))



Expression.attemptRewrite ["y"] (Expression.Equality (Expression.parse_expression "bar x y", Expression.parse_expression "y")) (Expression.parse_expression "bar a b")

Expression.Substitution.print_subt (Expression.match_expression ["y"] (Expression.parse_expression "bar y y") (Expression.parse_expression "bar a b"))
Expression.attemptRewrite ["y"] (Expression.Equality (Expression.parse_expression "bar y y", Expression.parse_expression "y")) (Expression.parse_expression "bar a b")



Expression.attemptRewrite ["x"] (Expression.Equality(Expression.parse_expression "foo x x", Expression.parse_expression "bar x")) (Expression.parse_expression "c");;


Expression.tryEqualities (Expression.parse_expression "foo x x") myEqualities;;

Expression.attemptRewrite ["x"] (Expression.Equality(Expression.parse_expression "foo x x", Expression.parse_expression "bar x")) (Expression.parse_expression "foo x x");;

Expression.tryEqualities (Expression.parse_expression "foo (bar a b) c") myEqualities;;

Expression.tryEqualities (Expression.parse_expression "foo c (bar a b)") myEqualities;;


Expression.attemptRewrite ["x"] (Expression.Equality (Expression.parse_expression "foo x x", Expression.parse_expression "bar x")) (Expression.parse_expression "foo (bar a b) c")

Expression.tryEqualities (Expression.parse_expression "bozo (bar a) (foo (bar a))") myEqualities;;

let myEqualities =
[ ("eq1", ["x"], Expression.Equality(Expression.parse_expression "foo x x", Expression.parse_expression "bar x"))
; ("eq2", ["x";"y"], Expression.Equality(Expression.parse_expression "bar x y", Expression.parse_expression "y"))
; ("eq3", ["x"], Expression.Equality(Expression.parse_expression "bozo x (foo x)", Expression.parse_expression "foo (bar x x)"))] ;; 



Expression.produceProof (Expression.Equality ((Expression.parse_expression "bozo a (bar (foo b) (foo a)) a"), (Expression.parse_expression "bozo a (bar (foo b) (foo a)) a"))) myEqualities;;

Expression.produce_output_simple (Expression.parse "")


Expression.produce_output_simple (Expression.parse "(* A minimal sample file for your ocaml prover.
This file does not contain everything your prover needs to do, just a small
selection:
- all functions and lemmas have only a single argument
- the only statement is a let-prove statement
- the only hint is 'axiom' (no 'induction')
*)
let (*prove*) cf_idempotent (h : int)
= (cf (cf h) = cf h)
(*hint: axiom *)
let (*prove*) inv_involution (h : int)
= (inv (inv h) = h)
(*hint: axiom *)
let (*prove*) cf_inv_commute (h : int)
= (cf (inv h) = inv (cf h))
(*hint: axiom *)
(* This should now be provable from the axioms: *)
let (*prove*) cf_inv_property (h : int)
= (cf (inv (cf (inv h))) = cf h)
(* no hints! *)");;


Expression.produce_output_simple (Expression.parse "(* Here's a file with two more proofs to test your implementation on: *)
(* a proof that does not go through (this tests the ???): *)
let (*prove*) fooxy (x:int) (y:int) = (foo x y = x)
(* some axioms that define append:
we're writing 'cons' as if it was a function,
this way we avoid the , in Cons (x,xs).
It's just to keep things simple. *)
let (*prove*) append_nil (xs:int) = (append Nil xs = xs)
(*hint: axiom *)
let (*prove*) append_cons (x:int) (xs:int) (ys:int) =
(append (cons x xs) ys = cons x (append xs ys))
(*hint: axiom *)
(* a proof of associativity of append requires induction,
but we can ask for the base case manually: *)
let (*prove*) append_assoc_base (xs:int) (ys:int) =
(append (append Nil xs) ys = append Nil (append xs ys))
(* We can add the inductive hypothesis manually too.
Note that 'tl' is never a variable,
and the above statement actually proves it for tl = Nil.
Here is the inductive hypothesis: *)
let (*prove*) ih_append_assoc (xs : list) (ys : list)
= (append (append tl xs) ys = append tl (append xs ys))
(*hint: axiom *)
let (*prove*) append_assoc_inductive_step (h:int) (xs:int) (ys:int) =
(append (append (cons h tl) xs) ys = append (cons h tl) (append xs ys))
(* There is more inspiration to be had from the homework and midterms.
Encoding induction theorems is a bit of a pain still,
but I hope the above illustrates how you can get to see your tool to give
proofs! *)
")